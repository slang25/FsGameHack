{"version":3,"sources":["canvas.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBAAA;AAWI,6EAXJ;AAYA,2BAZA;AAaA,4BAbA;;AAoBI,gDACE;AAAM,8CAAN;AACJ,iDADI;AAEJ,oCAFI;AAGJ,qCAHI;AAIJ,6CAJI;;SADF,CApBJ;;AA4BK,sCA5BL;;;;;;;;SA4BK,CA5BL;;AAiCK,wCAjCL;;;;;;;;SAiCK,CAjCL;;AAqCK,wCArCL;;;;;SAqCK,CArCL;;AAuCI,kDACE;AAAM,8CAAN;AACe,uEADf;AAEJ,uDAFI;SADF,CAvCJ;;AA4CI,0CACA;;AACM,yCADN;AACM,wCAEc,qBAFd,GACoB,oBADpB,CADN;SADA,CA5CJ;;AAkDQ,8BAAU;;sCACd;gEAAQ,OAAO,cAAU,2BAAV,EAAsC,oBAAtC,CAAP,CAAR,kBACA;;qBADA;iBADc;;SAAV,CAlDR;;AAsDI,kCAAe;;sCACf;8CACA,cAAI,gBAAY,WAAK,SAAL,CAAZ,CAAJ,EACA;oEAAQ,aAAR,kBACA;;yBADA;qBADA;iBADA;aADe;SAAf,CAtDJ;;AA4DA,SAAW;;UAAX,SA5DA","file":"canvas.js","sourcesContent":["// ---\r\n// header: Canvas\r\n// tagline: Using HTML5 canvas (adapted from FunScript)\r\n// ---\r\n\r\n#r \"node_modules/fable-core/Fable.Core.dll\"\r\n\r\nopen Fable.Core\r\nopen Fable.Import.Browser\r\nopen Fable.Import.JS\r\n\r\nlet canvas =  document.getElementsByTagName_canvas().[0]\r\ncanvas.width <- 768.\r\ncanvas.height <- 648.\r\n// let ctx = canvas.getContext_2d()\r\n// ctx.fillStyle <- U3.Case1 \"rgb(200,0,0)\"\r\n// ctx.fillRect (10., 10., 55., 50.);\r\n// ctx.fillStyle <- U3.Case1 \"rgba(0, 0, 200, 0.5)\"\r\n// ctx.fillRect (30., 30., 55., 50.)\r\n\r\nlet drawIntroText state =\r\n  let ctx = canvas.getContext_2d()\r\n  ctx.font <- \"48pt PixelFJVerdana12pt\"\r\n  ctx.fillStyle <- U3.Case1 \"black\"\r\n  ctx.textBaseline <- \"top\"\r\n  ctx.fillText (\"Yo, sup?\", 0., 270.)\r\n  ()\r\n\r\ntype CatState =\r\n    | Alive\r\n    | Dead\r\n    | None\r\n\r\ntype GameScene = \r\n     | IntroBlurb\r\n     | Main\r\n\r\ntype GameState = { Scene: GameScene; Cat: CatState}\r\n\r\nlet drawBackground state =\r\n  let ctx = canvas.getContext_2d ()\r\n  let backdropImg = (document.getElementById \"BackdropImage\") :?> HTMLImageElement\r\n  ctx.drawImage (U3.Case1 backdropImg, 0., 0., 768., 648.)\r\n\r\nlet drawCanvas state =\r\n    canvas.width <- canvas.width\r\n    match state.Scene with\r\n    | GameScene.IntroBlurb -> drawIntroText(state)\r\n    | GameScene.Main -> drawBackground(state)\r\n\r\nlet rec game () = async {\r\n    return! update { Scene = GameScene.IntroBlurb; Cat = CatState.None}\r\n    ()}\r\n\r\nand update state = async{\r\n    drawCanvas state\r\n    do! Async.Sleep(int (1000. / 60.))\r\n    return! update state\r\n    ()}\r\n\r\ngame () |> Async.StartImmediate\r\n"]}